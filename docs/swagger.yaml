basePath: /
definitions:
  dto.CreateMovieRequest:
    properties:
      backdrop_url:
        type: string
      casts:
        items:
          type: integer
        type: array
      directors:
        items:
          type: integer
        type: array
      genres:
        items:
          type: integer
        type: array
      overview:
        type: string
      poster_url:
        type: string
      rating:
        type: number
      release_date:
        type: string
      runtime:
        type: integer
      title:
        type: string
    required:
    - backdrop_url
    - casts
    - directors
    - genres
    - overview
    - poster_url
    - rating
    - release_date
    - runtime
    - title
    type: object
  dto.CreateTransactionRequest:
    properties:
      email:
        type: string
      id_cinema:
        type: integer
      id_location:
        type: integer
      id_movie:
        type: integer
      id_payment_method:
        type: integer
      id_time:
        type: integer
      movie_date:
        type: string
      name:
        type: string
      phone:
        type: string
      seats:
        items:
          type: string
        type: array
      total_payment:
        type: integer
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterUserRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - confirm_password
    - email
    - password
    type: object
  dto.ResetPasswordRequest:
    properties:
      confirm_password:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - confirm_password
    - password
    type: object
  dto.UpdateMovieRequest:
    properties:
      backdrop_url:
        type: string
      casts:
        items:
          type: integer
        type: array
      directors:
        items:
          type: integer
        type: array
      genres:
        items:
          type: integer
        type: array
      overview:
        type: string
      poster_url:
        type: string
      rating:
        type: number
      release_date:
        type: string
      runtime:
        type: integer
      title:
        type: string
    type: object
  dto.UpdateProfileRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      fullname:
        type: string
      new_password:
        type: string
      phone:
        type: string
    required:
    - email
    type: object
  models.CreatedMovies:
    properties:
      genre:
        items:
          type: string
        type: array
      id:
        type: integer
      poster_url:
        type: string
      release_date:
        type: string
      runtime:
        type: string
      title:
        type: string
    type: object
  models.DetailCreatedMovie:
    properties:
      backdrop_url:
        type: string
      cast:
        type: string
      director:
        type: string
      genre:
        items:
          type: string
        type: array
      id:
        type: integer
      overview:
        type: string
      poster_url:
        type: string
      release_date:
        type: string
      runtime:
        type: string
      title:
        type: string
    type: object
  models.Movie:
    properties:
      backdrop_url:
        type: string
      cast:
        items:
          type: string
        type: array
      director:
        items:
          type: string
        type: array
      genre:
        items:
          type: string
        type: array
      id:
        type: integer
      overview:
        type: string
      poster_url:
        type: string
      rating:
        type: number
      release_date:
        type: string
      runtime:
        type: integer
      title:
        type: string
    type: object
  models.NowShowingMovie:
    properties:
      genre:
        items:
          type: string
        type: array
      id:
        type: integer
      poster_url:
        type: string
      rating:
        type: number
      release_date:
        type: string
      title:
        type: string
    type: object
  models.TicketResult:
    properties:
      movie_date:
        type: string
      movie_title:
        type: string
      seat_count:
        type: integer
      seats:
        type: string
      show_time:
        type: string
      total_payment:
        type: integer
    type: object
  models.Transaction:
    properties:
      cinema:
        type: string
      email:
        type: string
      id:
        type: integer
      location:
        type: string
      movie_date:
        type: string
      name:
        type: string
      phone:
        type: string
      status_payment:
        type: string
      status_ticket:
        type: string
      time:
        type: string
      title:
        type: string
      total_payment:
        type: integer
    type: object
  models.TransactionResult:
    properties:
      cinema_name:
        type: string
      email:
        type: string
      location:
        type: string
      movie_date:
        type: string
      name:
        type: string
      payment_method:
        type: string
      phone:
        type: string
      time:
        type: string
      title:
        type: string
      total_payment:
        type: string
    type: object
  models.UpcomingMovie:
    properties:
      genre:
        items:
          type: string
        type: array
      id:
        type: integer
      poster_url:
        type: string
      release_date:
        type: string
      title:
        type: string
    type: object
  models.UserProfile:
    properties:
      email:
        type: string
      fullname:
        type: string
      phone:
        type: string
    type: object
  utils.PageInfo:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  utils.Response:
    properties:
      errors: {}
      message:
        type: string
      page_info:
        $ref: '#/definitions/utils.PageInfo'
      results: {}
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: API Documentation Booking Ticket Application
  title: Tickitz - Booking Ticket App
  version: "1.0"
paths:
  /admin/movies:
    get:
      consumes:
      - application/json
      description: Retrieve the list of all movies created through the admin panel
      parameters:
      - description: Filter by Release Month (e.g., 2025-07)
        in: query
        name: release_month
        type: string
      - description: Page (e.g., 1)
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                page_info:
                  $ref: '#/definitions/utils.PageInfo'
                results:
                  items:
                    $ref: '#/definitions/models.CreatedMovies'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get All Movies Created by Admin
      tags:
      - Admins
    post:
      consumes:
      - application/json
      description: Create movie with genre, cast, and director
      parameters:
      - description: Movie payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMovieRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create new movie
      tags:
      - Admins
  /admin/movies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie created by an admin using its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete Movie by ID (Admin Only)
      tags:
      - Admins
    get:
      consumes:
      - application/json
      description: Retrieve a specific movie created by the admin using its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.DetailCreatedMovie'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get Movie by ID (Admin Only)
      tags:
      - Admins
    patch:
      consumes:
      - application/json
      description: Update a movie created by an admin using its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update movie body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMovieRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update Movie (Admin Only)
      tags:
      - Admins
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request password reset by verifying email and returning reset token
      parameters:
      - description: User email for password reset
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Forgot Password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Login User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User Registration Input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register User
      tags:
      - Auth
  /auth/reset-password/{token}:
    post:
      consumes:
      - application/json
      description: Reset user password using a valid reset token
      parameters:
      - description: Reset token
        in: path
        name: token
        required: true
        type: string
      - description: New password data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Reset Password
      tags:
      - Auth
  /movies:
    get:
      consumes:
      - application/json
      description: Retrieve a list of movies with optional filters such as title search,
        sorting, and pagination.
      parameters:
      - description: Search movies by title
        in: query
        name: search
        type: string
      - description: Filter movies by genre
        in: query
        name: genre
        type: string
      - description: Sorting by field (e.g., popular, latest, title_asc, title_desc)
        in: query
        name: sort
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                page_info:
                  $ref: '#/definitions/utils.PageInfo'
                results:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get list of movies
      tags:
      - Movies
  /movies/{id}:
    get:
      consumes:
      - application/json
      description: Get movie detail by movie ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Movie By ID
      tags:
      - Movies
  /movies/now-showing:
    get:
      consumes:
      - application/json
      description: Retrieve a list of now showing movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NowShowingMovie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Now Showing Movies
      tags:
      - Movies
  /movies/upcoming:
    get:
      consumes:
      - application/json
      description: Retrieve a list of upcoming movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UpcomingMovie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Upcoming Movies
      tags:
      - Movies
  /transactions:
    post:
      consumes:
      - application/json
      description: Create a new transaction with seat selection for movie booking
      parameters:
      - description: Transaction payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.TransactionResult'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create new transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/ticket:
    get:
      consumes:
      - application/json
      description: Retrieve the ticket details for a specific transaction ID, accessible
        only by the authenticated user.
      parameters:
      - description: Transaction ID
        in: query
        name: transaction_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.TicketResult'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get Ticket Result by Transaction ID
      tags:
      - Transactions
  /transactions/booked-seats:
    get:
      consumes:
      - application/json
      description: Retrieve a list of already booked seats based on movie, date, time,
        location, and studio.
      parameters:
      - description: Movie ID
        in: query
        name: movie_id
        required: true
        type: integer
      - description: Movie date in format YYYY-MM-DD
        in: query
        name: date
        required: true
        type: string
      - description: Time ID
        in: query
        name: time_id
        required: true
        type: integer
      - description: Location ID
        in: query
        name: location_id
        required: true
        type: integer
      - description: Cinema ID
        in: query
        name: cinema_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    type: string
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get Booked Seats Info
      tags:
      - Transactions
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get detailed profile information of the currently logged-in user
        based on the JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.UserProfile'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Edit user profile based on the JWT token provided.
      parameters:
      - description: Updated profile data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Edit User Profile
      tags:
      - Users
  /user/transaction-history:
    get:
      consumes:
      - application/json
      description: Retrieve the transaction history of the currently logged-in user
        based on the JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved transaction history
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Transaction'
                  type: array
              type: object
        "401":
          description: 'Unauthorized: user ID not found or invalid token'
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get User Transaction History
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
