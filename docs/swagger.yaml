basePath: /
definitions:
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterUserRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - confirm_password
    - email
    - password
    type: object
  dto.ResetPasswordRequest:
    properties:
      confirm_password:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - confirm_password
    - password
    type: object
  models.Movie:
    properties:
      backdrop_url:
        type: string
      id:
        type: integer
      id_director:
        type: integer
      overview:
        type: string
      poster_url:
        type: string
      rating:
        type: number
      release_date:
        type: string
      runtime:
        type: integer
      title:
        type: string
    type: object
  models.UpcomingMovie:
    properties:
      genre:
        type: string
      id:
        type: integer
      poster_url:
        type: string
      rating:
        type: number
      release_date:
        type: string
      title:
        type: string
    type: object
  models.UserProfile:
    properties:
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
    type: object
  utils.Response:
    properties:
      errors: {}
      message:
        type: string
      results: {}
      success:
        type: boolean
    type: object
info:
  contact: {}
  description: API Documentation Booking Ticket Application
  title: Tickitz - Booking Ticket App
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Retrieve a list of upcoming movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UpcomingMovie'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Upcoming Movies
      tags:
      - Movies
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request password reset by verifying email and returning reset token
      parameters:
      - description: User email for password reset
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Forgot Password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Login User
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User Registration Input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register User
      tags:
      - Auth
  /auth/reset-password/{token}:
    post:
      consumes:
      - application/json
      description: Reset user password using a valid reset token
      parameters:
      - description: Reset token
        in: path
        name: token
        required: true
        type: string
      - description: New password data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Reset Password
      tags:
      - Auth
  /buy-ticket/{id}:
    get:
      consumes:
      - application/json
      description: Get movie detail by movie ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Movie'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Movie By ID
      tags:
      - Movies
  /movies:
    get:
      consumes:
      - application/json
      description: Get list of movies with optional search by title
      parameters:
      - description: Search by movie title
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.Movie'
              type: array
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: List Movies
      tags:
      - Movies
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get detailed information about the currently logged-in user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.UserProfile'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get User Profile
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
